apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.neenbedankt.android-apt'

android {
    signingConfigs {
        config
    }

    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    defaultConfig {
        applicationId "com.ayoprez.deilylang"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 4
        versionName "0.3"
        multiDexEnabled true
        signingConfig signingConfigs.config
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
            signingConfig signingConfigs.config
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/java-gen']
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/layouts/new_moment',
                    'src/main/res/layouts/word_screen',
                    'src/main/res/layouts/preferences',
                    'src/main/res/layouts/saved_word',
                    'src/main/res/layouts/rest'
            ]
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
        androidTest.setRoot('src/androidTest')
    }
    lintOptions {
        disable 'InvalidPackage'
    }
    productFlavors {
    }
}

def Properties props = new Properties()
def propFile = file(new File('../signing.properties'))
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.config.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.config.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.config.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.config.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    wearApp project(':wear')
    // ================== LIBRARIES ======================
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }
    compile('com.twitter.sdk.android:twitter:1.8.0@aar') {
        transitive = true;
    }
    compile('com.facebook.android:facebook-android-sdk:4.2.0') {
        exclude group: 'com.google.android', module: 'support-v4'
    }
    // ================== TESTING LIBRARIES ======================
    testCompile 'junit:junit:4.12'
    testCompile 'org.bouncycastle:bcprov-jdk15on:1.50'
    testCompile 'org.mockito:mockito-core:1.9.5'
    compile 'com.google.android.gms:play-services-auth:8.3.0'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:cardview-v7:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'de.greenrobot:greendao:2.0.0'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    apt 'com.google.dagger:dagger-compiler:2.0.2'
    compile 'com.google.dagger:dagger:2.0.2'
    provided 'org.glassfish:javax.annotation:10.0-b28'
}