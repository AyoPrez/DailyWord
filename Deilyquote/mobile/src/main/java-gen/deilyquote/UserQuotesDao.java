package deilyquote;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import deilyquote.UserQuotes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_QUOTES.
*/
public class UserQuotesDao extends AbstractDao<UserQuotes, Long> {

    public static final String TABLENAME = "USER_QUOTES";

    /**
     * Properties of entity UserQuotes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Language = new Property(1, String.class, "language", false, "LANGUAGE");
        public final static Property Personality = new Property(2, String.class, "personality", false, "PERSONALITY");
        public final static Property Personality2 = new Property(3, String.class, "personality2", false, "PERSONALITY2");
        public final static Property Personality3 = new Property(4, String.class, "personality3", false, "PERSONALITY3");
        public final static Property Quote = new Property(5, String.class, "quote", false, "QUOTE");
        public final static Property Author = new Property(6, String.class, "author", false, "AUTHOR");
    };


    public UserQuotesDao(DaoConfig config) {
        super(config);
    }
    
    public UserQuotesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_QUOTES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LANGUAGE' TEXT," + // 1: language
                "'PERSONALITY' TEXT," + // 2: personality
                "'PERSONALITY2' TEXT," + // 3: personality2
                "'PERSONALITY3' TEXT," + // 4: personality3
                "'QUOTE' TEXT," + // 5: quote
                "'AUTHOR' TEXT);"); // 6: author
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_QUOTES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserQuotes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(2, language);
        }
 
        String personality = entity.getPersonality();
        if (personality != null) {
            stmt.bindString(3, personality);
        }
 
        String personality2 = entity.getPersonality2();
        if (personality2 != null) {
            stmt.bindString(4, personality2);
        }
 
        String personality3 = entity.getPersonality3();
        if (personality3 != null) {
            stmt.bindString(5, personality3);
        }
 
        String quote = entity.getQuote();
        if (quote != null) {
            stmt.bindString(6, quote);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserQuotes readEntity(Cursor cursor, int offset) {
        UserQuotes entity = new UserQuotes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // language
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personality
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // personality2
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // personality3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // quote
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // author
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserQuotes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLanguage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonality(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersonality2(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPersonality3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQuote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAuthor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserQuotes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserQuotes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
